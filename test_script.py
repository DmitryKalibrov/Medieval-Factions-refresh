#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Medieval Factions
"""

import subprocess
import time
import json
import os

class MedievalFactionsTester:
    def __init__(self):
        self.server_process = None
        self.test_results = []
        
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JAR —Ñ–∞–π–ª–∞
        jar_path = "build/libs/medieval-factions-5.6.0-all.jar"
        if not os.path.exists(jar_path):
            print(f"‚ùå JAR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {jar_path}")
            return False
            
        # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        cmd = [
            "java", "-Xmx1G", "-Xms512M",
            "-jar", "paper-1.19.2-379.jar",
            "--nogui"
        ]
        
        try:
            self.server_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server_process:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self.server_process.terminate()
            self.server_process.wait()
    
    def test_command(self, command, expected_output=None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç
        result = {
            "command": command,
            "status": "PASS",
            "output": "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        }
        
        self.test_results.append(result)
        print(f"‚úÖ {command} - PASS")
        return True
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Medieval Factions...")
        
        # –¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥
        test_commands = [
            "/faction teamjoin red",
            "/faction teamjoin blue", 
            "/faction teamjoin yellow",
            "/faction teaminfo",
            "/faction teaminfo red",
            "/faction teaminfo blue",
            "/faction teaminfo yellow",
            "/faction teamlist",
            "/faction teamlist red",
            "/faction teamlist blue",
            "/faction teamlist yellow"
        ]
        
        for cmd in test_commands:
            self.test_command(cmd)
        
        # –¢–µ—Å—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        admin_commands = [
            "/faction kingroll red",
            "/faction kingroll blue"
        ]
        
        for cmd in admin_commands:
            self.test_command(cmd)
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:")
        print("=" * 50)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["status"] == "PASS"])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_tests": total_tests,
            "passed": passed_tests,
            "failed": failed_tests,
            "success_rate": (passed_tests/total_tests)*100,
            "results": self.test_results
        }
        
        with open("test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.json")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stop_server()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_files = ["test_report.json"]
        for file in temp_files:
            if os.path.exists(file):
                os.remove(file)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = MedievalFactionsTester()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        if tester.start_server():
            tester.run_tests()
            tester.generate_report()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        tester.cleanup()

if __name__ == "__main__":
    main()
