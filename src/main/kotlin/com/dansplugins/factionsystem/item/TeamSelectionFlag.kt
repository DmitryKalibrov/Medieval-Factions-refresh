package com.dansplugins.factionsystem.item

import com.dansplugins.factionsystem.MedievalFactions
import com.dansplugins.factionsystem.player.MfPlayerId
import com.dansplugins.factionsystem.team.TeamColor
import org.bukkit.ChatColor
import org.bukkit.Material
import org.bukkit.NamespacedKey
import org.bukkit.enchantments.Enchantment
import org.bukkit.entity.Player
import org.bukkit.event.EventHandler
import org.bukkit.event.Listener
import org.bukkit.event.block.Action
import org.bukkit.event.inventory.InventoryClickEvent
import org.bukkit.event.player.PlayerDropItemEvent
import org.bukkit.event.player.PlayerInteractEvent
import org.bukkit.event.player.PlayerPickupItemEvent
import org.bukkit.inventory.ItemFlag
import org.bukkit.inventory.ItemStack
import org.bukkit.persistence.PersistentDataType

class TeamSelectionFlag(private val plugin: MedievalFactions) : Listener {

    companion object {
        private val FLAG_KEY = NamespacedKey("medievalfactions", "team_selection_flag")
        private val TEAM_KEY = NamespacedKey("medievalfactions", "team_color")
    }

    fun createFlag(): ItemStack {
        val flag = ItemStack(Material.WHITE_BANNER)
        val meta = flag.itemMeta

        if (meta != null) {
            meta.setDisplayName("${ChatColor.WHITE}üèÅ –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã")
            meta.lore = listOf(
                "${ChatColor.LIGHT_PURPLE}–ü–ö–ú –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã",
                "${ChatColor.LIGHT_PURPLE}–ù–µ–ª—å–∑—è –≤—ã–∫–∏–Ω—É—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
            )

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            meta.addEnchant(Enchantment.DURABILITY, 1, true)
            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS)

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            meta.persistentDataContainer.set(FLAG_KEY, PersistentDataType.BYTE, 1.toByte())

            flag.itemMeta = meta
        }

        return flag
    }

    fun isTeamSelectionFlag(item: ItemStack?): Boolean {
        return item?.itemMeta?.persistentDataContainer?.has(FLAG_KEY, PersistentDataType.BYTE) == true
    }

    @EventHandler
    fun onPlayerInteract(event: PlayerInteractEvent) {
        if (event.action != Action.RIGHT_CLICK_AIR && event.action != Action.RIGHT_CLICK_BLOCK) return
        if (!isTeamSelectionFlag(event.item)) return

        event.isCancelled = true
        openTeamSelectionGUI(event.player)
    }

    @EventHandler
    fun onPlayerDropItem(event: PlayerDropItemEvent) {
        if (isTeamSelectionFlag(event.itemDrop.itemStack)) {
            event.isCancelled = true
            event.player.sendMessage("${ChatColor.RED}–ù–µ–ª—å–∑—è –≤—ã–∫–∏–Ω—É—Ç—å —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã!")
        }
    }

    @EventHandler
    fun onPlayerPickupItem(event: PlayerPickupItemEvent) {
        if (isTeamSelectionFlag(event.item.itemStack)) {
            event.isCancelled = true
        }
    }

    @EventHandler
    fun onInventoryClick(event: InventoryClickEvent) {
        if (event.view.title.contains("–í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã")) {
            event.isCancelled = true

            if (event.currentItem == null) return

            val team = when (event.slot) {
                3 -> TeamColor.RED
                5 -> TeamColor.BLUE
                7 -> TeamColor.YELLOW
                else -> return
            }

            val player = event.whoClicked as Player
            selectTeam(player, team)
            player.closeInventory()
        }

        // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if (isTeamSelectionFlag(event.cursor) || isTeamSelectionFlag(event.currentItem)) {
            if (event.action.name.contains("PLACE") || event.action.name.contains("MOVE")) {
                event.isCancelled = true
                event.whoClicked.sendMessage("${ChatColor.RED}–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã!")
            }
        }
    }

    private fun openTeamSelectionGUI(player: Player) {
        val inventory = plugin.server.createInventory(null, 9, "${ChatColor.WHITE}–í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã")

        // –ö—Ä–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        val redTeam = ItemStack(Material.RED_BANNER)
        val redMeta = redTeam.itemMeta
        if (redMeta != null) {
            redMeta.setDisplayName("${ChatColor.RED}–ö—Ä–∞—Å–Ω—ã–µ")
            redMeta.lore = listOf(
                "${ChatColor.RED}–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ö—Ä–∞—Å–Ω—ã–º",
                "${ChatColor.RED}–ò–º–µ—é—Ç –∫–æ—Ä–æ–ª—è",
                "${ChatColor.RED}–ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞"
            )
            redMeta.persistentDataContainer.set(TEAM_KEY, PersistentDataType.STRING, TeamColor.RED.name)
            redTeam.itemMeta = redMeta
        }
        inventory.setItem(3, redTeam)

        // –°–∏–Ω—è—è –∫–æ–º–∞–Ω–¥–∞
        val blueTeam = ItemStack(Material.BLUE_BANNER)
        val blueMeta = blueTeam.itemMeta
        if (blueMeta != null) {
            blueMeta.setDisplayName("${ChatColor.AQUA}–°–∏–Ω–∏–µ")
            blueMeta.lore = listOf(
                "${ChatColor.AQUA}–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –°–∏–Ω–∏–º",
                "${ChatColor.AQUA}–ò–º–µ—é—Ç –∫–æ—Ä–æ–ª—è",
                "${ChatColor.AQUA}–ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞"
            )
            blueMeta.persistentDataContainer.set(TEAM_KEY, PersistentDataType.STRING, TeamColor.BLUE.name)
            blueTeam.itemMeta = blueMeta
        }
        inventory.setItem(5, blueTeam)

        // –ñ—ë–ª—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ (–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ã)
        val yellowTeam = ItemStack(Material.YELLOW_BANNER)
        val yellowMeta = yellowTeam.itemMeta
        if (yellowMeta != null) {
            yellowMeta.setDisplayName("${ChatColor.YELLOW}–ñ—ë–ª—Ç—ã–µ (–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ã)")
            yellowMeta.lore = listOf(
                "${ChatColor.GOLD}–°—Ç–∞—Ç—å –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–æ–º",
                "${ChatColor.GOLD}–°–≤–æ–±–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
                "${ChatColor.GOLD}–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–º–∞–Ω–¥"
            )
            yellowMeta.persistentDataContainer.set(TEAM_KEY, PersistentDataType.STRING, TeamColor.YELLOW.name)
            yellowTeam.itemMeta = yellowMeta
        }
        inventory.setItem(7, yellowTeam)

        player.openInventory(inventory)
    }

    private fun selectTeam(player: Player, team: TeamColor) {
        val playerId = MfPlayerId(player.uniqueId.toString())
        val currentTeam = plugin.teamService.getPlayerTeam(playerId)

        if (currentTeam == team) {
            player.sendMessage("${ChatColor.RED}–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–º–µ–Ω –∫–æ–º–∞–Ω–¥
        val success = plugin.teamService.setPlayerTeam(playerId, team)
        if (!success) {
            player.sendMessage("${ChatColor.RED}–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–º–µ–Ω –∫–æ–º–∞–Ω–¥ (–º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞)!")
            return
        }

        val teamName = when (team) {
            TeamColor.RED -> "–ö—Ä–∞—Å–Ω—ã–µ"
            TeamColor.BLUE -> "–°–∏–Ω–∏–µ"
            TeamColor.YELLOW -> "–ñ—ë–ª—Ç—ã–µ (–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ã)"
        }

        player.sendMessage("${ChatColor.GREEN}–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ: $teamName")

        // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∏–∑ 9 —Å–ª–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
        val flagSlot = player.inventory.getItem(8)
        if (isTeamSelectionFlag(flagSlot)) {
            player.inventory.setItem(8, null)
            player.sendMessage("${ChatColor.LIGHT_PURPLE}–§–ª–∞–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã
        if (currentTeam != null) {
            val currentTeamName = when (currentTeam) {
                TeamColor.RED -> "–ö—Ä–∞—Å–Ω—ã—Ö"
                TeamColor.BLUE -> "–°–∏–Ω–∏—Ö"
                TeamColor.YELLOW -> "–ñ—ë–ª—Ç—ã—Ö"
            }
            plugin.server.broadcastMessage("${ChatColor.GREEN}${player.name} –ø–µ—Ä–µ—à–µ–ª –∏–∑ –∫–æ–º–∞–Ω–¥—ã $currentTeamName –≤ $teamName")
        }
    }

    fun giveFlagToPlayerOnJoin(player: Player) {
        val playerId = MfPlayerId(player.uniqueId.toString())
        val currentTeam = plugin.teamService.getPlayerTeam(playerId)

        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ, –Ω–µ –≤—ã–¥–∞–µ–º —Ñ–ª–∞–≥
        if (currentTeam != null) return

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–ª–∞–≥ –≤ 9 —Å–ª–æ—Ç–µ
        val currentItem = player.inventory.getItem(8)
        if (currentItem != null && !currentItem.type.isAir && !isTeamSelectionFlag(currentItem)) {
            // –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º, –Ω–µ –≤—ã–¥–∞–µ–º —Ñ–ª–∞–≥
            return
        }

        // –ï—Å–ª–∏ —Ñ–ª–∞–≥ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –≤—ã–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (isTeamSelectionFlag(currentItem)) return

        player.inventory.setItem(8, createFlag())
        player.sendMessage("${ChatColor.GREEN}üèÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é —Ñ–ª–∞–≥–∞ –≤ 9-–º —Å–ª–æ—Ç–µ")
        player.sendMessage("${ChatColor.LIGHT_PURPLE}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–ö–ú –ø–æ —Ñ–ª–∞–≥—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã")
    }
}
